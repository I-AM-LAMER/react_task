/// <reference types="react" />
import { AutoCompleteGroupDefault, AutoCompleteItemDefault, AutoCompletePropGetGroupId, AutoCompletePropGetGroupLabel, AutoCompletePropGetItemGroupId, AutoCompletePropGetItemKey, AutoCompletePropGetItemLabel, AutoCompleteProps } from './types';
export declare const defaultGetItemKey: AutoCompletePropGetItemKey<AutoCompleteItemDefault>;
export declare const defaultGetItemLabel: AutoCompletePropGetItemLabel<AutoCompleteItemDefault>;
export declare const defaultGetItemGroupKey: AutoCompletePropGetItemGroupId<AutoCompleteItemDefault>;
export declare const defaultGetGroupKey: AutoCompletePropGetGroupId<AutoCompleteGroupDefault>;
export declare const defaultGetGroupLabel: AutoCompletePropGetGroupLabel<AutoCompleteGroupDefault>;
export declare function withDefaultGetters<TYPE extends string, ITEM = AutoCompleteItemDefault, GROUP = AutoCompleteGroupDefault>(props: AutoCompleteProps<TYPE, ITEM, GROUP>): (TYPE extends "textarray" ? Omit<import("../TextFieldCanary").TextFieldProps<"textarray">, "type" | "onChange"> : Omit<import("../TextFieldCanary").TextFieldProps<string>, "type" | "onChange">) & {
    type?: TYPE | undefined;
    onChange?: import("./types").AutoCompletePropOnChange<TYPE> | undefined;
    items?: ITEM[] | undefined;
    groups?: GROUP[] | undefined;
    renderItem?: import("../Select").PropRenderItem<ITEM> | undefined;
    dropdownClassName?: string | undefined;
    dropdownForm?: import("./types").AutoCompletePropDropdownForm | undefined;
    isLoading?: boolean | undefined;
    searchFunction?: import("./types").AutoCompletePropSearchFunction<ITEM> | undefined;
    dropdownRef?: import("react").RefObject<HTMLDivElement> | undefined;
    getItemLabel?: AutoCompletePropGetItemLabel<ITEM> | undefined;
    getItemKey?: AutoCompletePropGetItemKey<ITEM> | undefined;
    getItemGroupKey?: AutoCompletePropGetItemGroupId<ITEM> | undefined;
    getGroupLabel?: AutoCompletePropGetGroupLabel<GROUP> | undefined;
    getGroupKey?: AutoCompletePropGetGroupId<GROUP> | undefined;
    virtualScroll?: boolean | undefined;
    onScrollToBottom?: ((length: number) => void) | undefined;
    onDropdownOpen?: ((isOpen: boolean) => void) | undefined;
    dropdownOpen?: boolean | undefined;
    ignoreOutsideClicksRefs?: readonly import("react").RefObject<HTMLElement>[] | undefined;
} & (ITEM extends {
    label: string;
} ? {} : {
    getItemLabel: AutoCompletePropGetItemLabel<ITEM>;
}) & (GROUP extends {
    label: string;
} ? {} : {
    getGroupLabel: AutoCompletePropGetGroupLabel<GROUP>;
}) & (GROUP extends {
    id: string | number;
} ? {} : {
    getGroupKey: AutoCompletePropGetGroupId<GROUP>;
}) & {
    getItemLabel: AutoCompletePropGetItemLabel<AutoCompleteItemDefault> | AutoCompletePropGetItemLabel<ITEM>;
    getItemKey: AutoCompletePropGetItemKey<AutoCompleteItemDefault> | AutoCompletePropGetItemKey<ITEM>;
    getItemGroupKey: AutoCompletePropGetItemGroupId<AutoCompleteItemDefault> | AutoCompletePropGetItemGroupId<ITEM>;
    getGroupLabel: AutoCompletePropGetGroupLabel<AutoCompleteGroupDefault> | AutoCompletePropGetGroupLabel<GROUP>;
    getGroupKey: AutoCompletePropGetGroupId<AutoCompleteGroupDefault> | AutoCompletePropGetGroupId<GROUP>;
};
