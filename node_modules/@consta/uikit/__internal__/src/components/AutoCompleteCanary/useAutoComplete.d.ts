import React from 'react';
import { AutoCompletePropOnChange } from './types';
declare type GetItemGroupKey<ITEM> = (item: ITEM) => string | number | undefined;
declare type GetGroupKey<GROUP> = (item: GROUP) => string | number | undefined;
declare type UseAutoCompleteProps<ITEM, GROUP> = {
    getItemGroupKey?: GetItemGroupKey<ITEM> | undefined;
    getGroupKey?: GetGroupKey<GROUP>;
    groups?: GROUP[];
    items: ITEM[];
    dropdownRef: React.MutableRefObject<HTMLDivElement | null>;
    disabled?: boolean;
    getItemLabel: (item: ITEM) => string;
    getItemKey: (item: ITEM) => string | number;
    searchFunction?: (item: ITEM, searchValue: string) => boolean;
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    searchValue?: string;
    onChange?: AutoCompletePropOnChange<'text'>;
    isLoading?: boolean;
    dropdownOpen?: boolean;
    onDropdownOpen?: (isOpen: boolean) => void;
    ignoreOutsideClicksRefs?: ReadonlyArray<React.RefObject<HTMLElement>>;
};
declare type OptionProps<ITEM> = {
    index: number;
    item: ITEM;
    keyPrefix: number;
};
declare type GetOptionPropsResult = {
    onClick: (e: React.MouseEvent) => void;
    onMouseEnter: (e: React.MouseEvent) => void;
    active: boolean;
    hovered: boolean;
    key: string | number;
};
export declare function useAutoComplete<ITEM, GROUP>(params: UseAutoCompleteProps<ITEM, GROUP>): {
    isOpen: boolean;
    visibleItems: import("../../utils/getGroups").Group<ITEM, GROUP>[];
    getOptionProps: ({ index, item, }: OptionProps<ITEM>) => GetOptionPropsResult;
    handleInputFocus: (e: React.FocusEvent<HTMLInputElement>) => void;
    inputRef: React.RefObject<HTMLInputElement>;
    getKeyProps: (rest?: import("../../hooks/useKeysDeprecated").KeyProps | undefined) => import("../../hooks/useKeysDeprecated").KeyProps;
    hasItems: boolean;
    optionsRefs: React.RefObject<HTMLDivElement>[];
    handleChange: AutoCompletePropOnChange<"text">;
    highlightedIndex: number;
};
export {};
