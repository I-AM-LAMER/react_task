import React from 'react';
import { TextFieldPropOnChange } from './types';
export declare const useTextField: <INPUT_ELEMENT extends HTMLInputElement | HTMLTextAreaElement = HTMLInputElement>({ onClick, onChange, onBlur, onFocus, disabled, onClear, }: {
    onClick: React.MouseEventHandler<HTMLDivElement> | undefined;
    onChange: TextFieldPropOnChange<string> | undefined;
    onBlur: React.FocusEventHandler<HTMLElement> | undefined;
    onFocus: React.FocusEventHandler<HTMLElement> | undefined;
    disabled: boolean | undefined;
    onClear: React.MouseEventHandler<HTMLButtonElement> | undefined;
}) => {
    ref: React.RefObject<HTMLDivElement>;
    inputRef: React.RefObject<INPUT_ELEMENT>;
    focused: boolean;
    withValue: boolean;
    handleFocus: React.FocusEventHandler<HTMLElement>;
    handleBlur: React.FocusEventHandler<HTMLElement>;
    handleClear: (e: React.MouseEvent<HTMLButtonElement>) => void;
    handleChange: React.ChangeEventHandler<INPUT_ELEMENT>;
    handleClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    mutableRefs: React.MutableRefObject<readonly [TextFieldPropOnChange<string> | undefined, React.MouseEventHandler<HTMLDivElement> | undefined, React.FocusEventHandler<HTMLElement> | undefined, React.FocusEventHandler<HTMLElement> | undefined, boolean | undefined, React.MouseEventHandler<HTMLButtonElement> | undefined]>;
    setWithValue: {
        on: () => void;
        off: () => void;
        toggle: () => void;
        set: React.Dispatch<React.SetStateAction<boolean>>;
    };
};
