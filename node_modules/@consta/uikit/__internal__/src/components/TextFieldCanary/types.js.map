{"version":3,"file":"types.js","names":[],"sources":["../../../../../src/components/TextFieldCanary/types.ts"],"sourcesContent":["import { IconComponent, IconPropSize } from '@consta/icons/Icon';\nimport React from 'react';\n\nimport {\n  FieldPropForm,\n  FieldPropSize,\n  FieldPropStatus,\n  FieldPropView,\n} from '##/components/FieldComponents';\nimport { AutoCompete } from '##/utils/types/AutoComplete';\nimport { PropsWithHTMLAttributesAndRef } from '##/utils/types/PropsWithHTMLAttributes';\n\nexport type TextFieldPropValue<TYPE> = TYPE extends 'textarray'\n  ? string[] | null\n  : string | null;\n\nexport type TextFieldPropDefaultValue<TYPE> = TYPE extends 'textarray'\n  ? never\n  : string | null;\n\nexport type TextFieldPropSize = FieldPropSize;\n\nexport type TextFieldPropOnChange<TYPE> = (\n  value: TextFieldPropValue<TYPE>,\n  params: {\n    e: React.ChangeEvent | React.MouseEvent | React.KeyboardEvent;\n  },\n) => void;\n\ntype InputType<TYPE extends string> = TYPE extends 'textarea'\n  ? HTMLTextAreaElement\n  : HTMLInputElement;\n\ntype TextFieldPropsTypeTextArea<TYPE> = TYPE extends 'textarea'\n  ? {\n      resize?: boolean | 'auto';\n    } & (\n      | {\n          minRows?: never;\n          maxRows?: never;\n          rows?: number;\n        }\n      | {\n          rows?: never;\n          minRows?: number;\n          maxRows?: number;\n        }\n    )\n  : {};\n\nexport type TextFieldPropRenderValueItem = (props: {\n  item: string;\n  index: number;\n  onRemove: (e: React.MouseEvent) => void;\n  size: FieldPropSize;\n  disabled: boolean | undefined;\n}) => React.ReactNode;\n\ntype TextFieldPropsTypeTextArray<TYPE> = TYPE extends 'textarray'\n  ? {\n      renderValueItem?: TextFieldPropRenderValueItem;\n      inputValue?: string | null;\n      onInputChange?: TextFieldPropOnChange<string>;\n    }\n  : {};\n\ntype TextFieldPropsTypeNumber<TYPE> = TYPE extends 'number'\n  ? {\n      max?: number | string;\n      min?: number | string;\n      step?: number | string | number[];\n      incrementButtons?: boolean;\n    }\n  : {};\n\nexport type TextFieldProps<TYPE extends string> = PropsWithHTMLAttributesAndRef<\n  {\n    className?: string;\n    value?: TextFieldPropValue<TYPE>;\n    defaultValue?: TextFieldPropDefaultValue<TYPE>;\n    onChange?: TextFieldPropOnChange<TYPE>;\n    id?: string;\n    name?: string;\n    type?: TYPE;\n    disabled?: boolean;\n    mixLength?: number;\n    maxLength?: number;\n    size?: TextFieldPropSize;\n    view?: FieldPropView;\n    form?: FieldPropForm;\n    status?: FieldPropStatus;\n    onFocus?: React.FocusEventHandler<InputType<TYPE>>;\n    onBlur?: React.FocusEventHandler<InputType<TYPE>>;\n    autoFocus?: boolean;\n    placeholder?: string;\n    leftSide?: string | IconComponent;\n    rightSide?: string | IconComponent;\n    withClearButton?: boolean;\n    autoComplete?: AutoCompete;\n    readOnly?: boolean;\n    tabIndex?: number;\n    ariaLabel?: string;\n    iconSize?: IconPropSize;\n    children?: never;\n    onClear?: React.MouseEventHandler<HTMLButtonElement>;\n    inputRef?: React.Ref<InputType<TYPE>>;\n    onKeyUp?: React.KeyboardEventHandler<InputType<TYPE>>;\n    onKeyUpCapture?: React.KeyboardEventHandler<InputType<TYPE>>;\n    onKeyDown?: React.KeyboardEventHandler<InputType<TYPE>>;\n    onKeyDownCapture?: React.KeyboardEventHandler<InputType<TYPE>>;\n    onCopy?: React.ClipboardEventHandler<InputType<TYPE>>;\n    onCopyCapture?: React.ClipboardEventHandler<InputType<TYPE>>;\n    onCut?: React.ClipboardEventHandler<InputType<TYPE>>;\n    onCutCapture?: React.ClipboardEventHandler<InputType<TYPE>>;\n    onPaste?: React.ClipboardEventHandler<InputType<TYPE>>;\n    onPasteCapture?: React.ClipboardEventHandler<InputType<TYPE>>;\n    onWheel?: React.WheelEventHandler<InputType<TYPE>>;\n  },\n  HTMLDivElement\n> &\n  TextFieldPropsTypeTextArea<TYPE> &\n  TextFieldPropsTypeTextArray<TYPE> &\n  TextFieldPropsTypeNumber<TYPE>;\n\nexport type TextFieldComponent = <TYPE extends string>(\n  props: TextFieldProps<TYPE>,\n) => React.ReactElement | null;\n\nexport type TextFieldTypeComponent<TYPE extends string> = (\n  props: TextFieldProps<TYPE>,\n) => React.ReactElement | null;\n"],"mappings":""}