import _slicedToArray from"@babel/runtime/helpers/slicedToArray";function _createForOfIteratorHelper(a,b){var c="undefined"!=typeof Symbol&&a[Symbol.iterator]||a["@@iterator"];if(!c){if(Array.isArray(a)||(c=_unsupportedIterableToArray(a))||b&&a&&"number"==typeof a.length){c&&(a=c);var d=0,e=function(){};return{s:e,n:function n(){return d>=a.length?{done:!0}:{done:!1,value:a[d++]}},e:function e(a){throw a},f:e}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var f,g=!0,h=!1;return{s:function s(){c=c.call(a)},n:function n(){var a=c.next();return g=a.done,a},e:function e(a){h=!0,f=a},f:function f(){try{g||null==c["return"]||c["return"]()}finally{if(h)throw f}}}}function _unsupportedIterableToArray(a,b){if(a){if("string"==typeof a)return _arrayLikeToArray(a,b);var c=Object.prototype.toString.call(a).slice(8,-1);return"Object"===c&&a.constructor&&(c=a.constructor.name),"Map"===c||"Set"===c?Array.from(a):"Arguments"===c||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c)?_arrayLikeToArray(a,b):void 0}}function _arrayLikeToArray(a,b){(null==b||b>a.length)&&(b=a.length);for(var c=0,d=Array(b);c<b;c++)d[c]=a[c];return d}import React,{useLayoutEffect}from"react";import{useMutableRef}from"../useMutableRef";export var useResizeObserved=function(a,b){var c=useMutableRef(function(){return a.map(function(a){return b(a.current)})}),d=React.useState(c.current),e=_slicedToArray(d,2),f=e[0],g=e[1];return useLayoutEffect(function(){g(c.current)},[a]),useLayoutEffect(function(){var b,d=new ResizeObserver(function(){g(c.current)}),e=_createForOfIteratorHelper(a);try{for(e.s();!(b=e.n()).done;){var f=b.value;f.current&&d.observe(f.current)}}catch(a){e.e(a)}finally{e.f()}return function(){d.disconnect()}},[a]),f};
//# sourceMappingURL=useResizeObserved.js.map